dims
dims
str(X)
str(Y)
year(T)
format(T, "%Y")
T
str(T)
t <- as.PCICt(T)
require(PCICt)
t <- as.PCICt(T)
?as.PCICt
t <- as.PCICt(T, cal="gregorian")
str(var)
q()
n

        file <- "/ouce-home/staff/cenv0433/bin/ncplot/tadhea.pa1851.jan.03250.nc"
        variable <- "dew_point_temperature"

    ## load data
    nc <- nc_open(file)
    var <- ncvar_get(nc, variable)
    dims <- nc.get.dim.axes(nc, variable)
                                        #    dims <- nc.get.dim.names(nc, variable)
    X <- ncvar_get(nc, names(dims)[dims == "X"])
    Y <- ncvar_get(nc, names(dims)[dims == "Y"])



suppressPackageStartupMessages(library("ncdf4"))
suppressPackageStartupMessages(library("ncdf4.helpers"))
suppressPackageStartupMessages(library("spacetime"))
suppressPackageStartupMessages(library("fields"))
suppressPackageStartupMessages(library("maps"))
suppressPackageStartupMessages(library("maptools"))


    nc <- nc_open(file)
    var <- ncvar_get(nc, variable)
    dims <- nc.get.dim.axes(nc, variable)
                                        #    dims <- nc.get.dim.names(nc, variable)
    X <- ncvar_get(nc, names(dims)[dims == "X"])
    Y <- ncvar_get(nc, names(dims)[dims == "Y"])


    t.orig <- strsplit(ncatt_get(nc, names(dims)[dims == "T"], "units")$value, " since ")[[1]]
    T <- ncvar_get(nc, "time")*nc.get.time.multiplier(t.orig[1])
    time <- as.POSIXct(T, origin=strptime(t.orig[2], "%Y-%m-%d"))
    Xname <- ncatt_get(nc, names(dims)[dims == "X"], "standard_name")$value
    Yname <- ncatt_get(nc, names(dims)[dims == "Y"], "standard_name")$value

    X <- seq(0,360, length.out=dim(var)[1])
    Y <- seq(-80,80, length.out=dim(var)[2])
    

    a2st <- function(arr,
                    lon=attr(arr, "lon"),
                    lat=attr(arr, "lat"),
                    time=attr(arr, "time")) {
  
        ## library(spacetime)
        ## library(sp)
        ## library(rgdal)
        ## library(fields)
  
        ## convert data 'cube' to data frame - CHECK THE ORDER IS CORRECT
        ## dat <- data.frame(val=vector(mode="numeric", length=prod(dim(arr))))
        ## ind <- 0
        ## for (k in 1:length(time)) {
        ##     for (j in 1:length(lat)) {
        ##         for (i in 1:length(lon)) {
        ##             ind <- ind+1
        ##             dat$val[ind] <- arr[i,j,k]
        ##         }
        ##     }
        ## }
        dat2 <- data.frame(val=c(arr))
        
        ## create spatial object
        sp <- SpatialPoints(data.frame(lon=rep(lon, times=length(lat)), lat=rep(lat, each=length(lon))))
        sp <- SpatialPixels(sp)
        gridded(sp) <- TRUE
  
        ## spacetime object
        mydata.st <- STFDF(sp, time, dat2)

        return(mydata.st)
    }


    Z.st <- a2st(var-273.15, X, Y, time)


 
    countries.m = map('world', plot=FALSE, fill=TRUE)
    IDs <- sapply(strsplit(countries.m$names, ":"), function(x) x[1])
    library("maptools")
    countries = map2SpatialPolygons(countries.m, IDs=IDs)
    test2 <- map2SpatialLines(map('world', plot=F))
    proj4string(test2) <- "+proj=longlat +datum=WGS84"

    

    
    polys <- list("sp.polygons", test2, col=1)
    
    x11()
    stplot(Z.st,col.regions=tim.colors(),
           sp.layout=polys)

    stplot(Z.st,col.regions=tim.colors(),
           sp.layout=polys)
q()
n
q()
n
?make_option
?make_option
q()
n
grid.mapping
grid.mapping
1
nc
grid.type
grid.type
rlat
grid.lonlat
dim(var)
grid.mapping
?mapproject
mapprojet(X, Y[1], orientation=c(plat, plon)
)
require(mapproject)
require(mapproj)
mapprojet(X, Y[1], orientation=c(plat, plon))
mapproject(X, Y[1], orientation=c(plat, plon))
mapproject(X, rep(Y[1], length(X)), orientation=c(plat, plon))
head(lon1)
mapprojet(X, Y[1], orientation=c(plat, plon))
dim(lon1)
length(X)
length(Y)
lon1[,1]
lat1[,1]
test
lon1+360
lon1[,1]
lat1[,1]
lon1[,1]+360
test
data(world.nations)
str(world.nations)
plot(world.nations$border$lon, world.nations$border$lat, type="l")
?lonlat2rotpol
dim(mapcors)
head(mapcors)
navals
str(world.nations)
plot(mapcors, type="l")
xlim
Y
Y
?findInterval
plot(mapcors, type="l")
range(world.nations$border$lon)
range(world.nations$border$lon, na.rm=T)
head(mapcors.rot)
invals
head(mapcors)
mapcors
plot(invals)
range(X)
range(Y)
xlim
range(Xtemp)
range(Xtemp)
plot(invals)
plot(mapcors, type="l")
plot(mapcors, type="l")
head(mapcors.rot)
plot(invals)
range(mapcors[,1],na.rm=T)
range(mapcors[,2],na.rm=T)
range(mapcors[,1],na.rm=T)
range(mapcors[,2],na.rm=T)
range(mapcors.rot[,1],na.rm=T)
range(mapcors.rot[,2],na.rm=T)
plot(mapcors, type="l")
X
Y
range(mapcors[,1])
range(mapcors[,1], na.rm=T)
xlim
?image.plot
range(mapcors)
range(mapcors, na.rm=T)
str(test2)
?map2SpatialLines
mfrows
stplot
showMethods("stplot")
stplot.STFDF
lon.namre
?match
lon.name
?SpatialPoints
arr <- var
str(lon)
str(lat)
str(arr)
?SpatialPixels
str(dat2)
str(time)
str(sp)
arr <- var
str(arr)
str(lon)
str(lat)
str(lon)
str(lat)
str(sp)
str(sp)
Z.st <- mydata.st
mfrows
par(mfrow=c(1,1))
image(X[Xorder],Y[Yorder],var[Xorder,Yorder,i])
image(X[Xorder],Y[Yorder],var[Xorder,Yorder,i])
lines(mapcors)
?image
plot(mapcors, type="l")
?pretty
image
getAnywhere(image)
getAnywhere(image.graphics)
image:::
:::image
:::
getAnywhere(image.graphics)[1]
getAnywhere(image)[1]
getMethods("image")
getMethod("image")
pretty(1:15)
pretty(1:15, eps.correct=0)
pretty(1:15, eps.correct=1)
pretty(1:15, eps.correct=2)
pretty(c(1:15, 1000), eps.correct=2)
pretty(c(1:15, 1000), eps.correct=0)
pretty(c(1:15, 1000), eps.correct=1)
str(mapcors)
str(world.nations)
xlim
ylim
range(X)
range(Y)
outlier <- apply(mapcors, 1, function(v) (findInterval(v[1], c(342,344)) == 1) & (findInterval(v[2], c(6,12)) == 1))
world.nations$borders$index[outlier]
outlier <- apply(mapcors, 1, function(v) (findInterval(v[1], c(342,344)) == 1) & (findInterval(v[2], c(6,12)) == 1))
str(outlier)
any(outlier)
world.nations$borders$index[which(outlier)]
world.nations$table$NAME[c(89,137)]
str(world.nations)
nz.coords <- world.nations$borders[world.nations$borders$index==137 ,]
str(nz.coords)
range(nz.coords$lon)
range(nz.coords$lon, na.rm=T)
range(nz.coords$lat, na.rm=T)
?make.grid
expand.grid(1:10,1:5)
str(grid.lonlat)
?expand.grid
str(grid.lonlat)
str(grid.lonlat)
apply(grid.lonlat, 2, range, na.rm=T)
apply(world.nations$borders, 2, range, na.rm=T)
in.range
range(mapcors[,1], na.rm=T)
diff(X)
diff(Y)
unique(diff(Y))
unique(diff(X))
time
breaks
breaks
breaks
breaks
?x11
gridded(sp) <- TRUE
sp
str(sp)
?stplot
head(define.plt)
mfrow(c(2,4))
par(mfrow=c(2,4))
plot(1)
plot(1)
plt.list
?image
plt.list
i <- 1
i <- 2
x <- X[Xorder]
y <- Y[Yorder]
col <- my.tim.colors
main <- time[i]
bigplot <- plt.list[[i]]
bigplot
add
axis.args <- list()
    image(x,y,zval, col=c(colbar, grey.col), breaks=brk.image, axes = axes)
i <- 2
qn()
