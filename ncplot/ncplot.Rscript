#! /usr/bin/env Rscript
## xml wurkunit table - generate a table from an xml file of WUs (with start dumps, ancillaries, perturbation, etc)
## Author : Benoit Guillod
## Syntax :
## ./xml2table -i=input_file.xml -o=output_file.dat
## n.b.: the output file argument is optional. If not given, the input_file will be taken after changing the extension to '.dat'

## load packages
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library("ncdf4"))
suppressPackageStartupMessages(library("ncdf4.helpers"))
suppressPackageStartupMessages(library("spacetime"))
suppressPackageStartupMessages(library("fields"))
suppressPackageStartupMessages(library("maps"))
suppressPackageStartupMessages(library("maptools"))
suppressPackageStartupMessages(library("plotmap"))
suppressPackageStartupMessages(library("PCICt"))


## library("ncdf4")
## library("ncdf4.helpers")
## library("spacetime")
## library("fields")
## library("maps")
## library("maptools")

## List of options
option_list <- list( 
    make_option(c("-i", "--input"), type="character", action="store", default=NULL,
                help="Netcdf file to plot from",
                metavar="example.xml"),
    make_option(c("-v", "--variable"), type="character", action="store", default=NULL,
                help="Name of the variable to plot",
                metavar="field16"),
    make_option(c("-p", "--plottype"), type="character", action="store", default=NULL,
                help="Name of the plot type: 'image' or 'spacetime'",
                metavar="image"),
    make_option(c("-b", "--borders"), type="logical", action="store_true", default=FALSE,
                help="Add country borders to map?"),
    make_option(c("-o", "--output"), type="character", action="store", 
                help="Output file for figure [optional]",
                metavar="example.pdf"))

## get command line options, if help option encountered print help and exit,
## otherwise if options not found on command line then set defaults,
opt <- parse_args(OptionParser(option_list=option_list))
## do required arguments exists?
required.args <- c("input", "variable")
missing.args <- is.na(match(required.args, names(opt))) | sapply(opt[required.args], is.null)
if (any(missing.args)) {
    print(required.args[missing.args])
    stop(paste("** Required argument missing:", paste(required.args[missing.args], collapse=" & ")))
}
## prepare function args
func.args <- list(file=opt$input, var=opt$variable, with.borders=opt$borders, file.out=opt$output, plottype=opt$plottype)
func.args <- func.args[!sapply(func.args, is.null)]



ncplot <- function(file, variable, with.borders, file.out, plottype="spacetime") {

    if (FALSE) {

        file1 <- "/ouce-home/staff/cenv0433/bin/ncplot/tadhea.pa1851.jan.03250.nc"
        variable1 <- "dew_point_temperature"
        file.out <- "test.eps"
        file <- file1
        variable <- variable1

        file2 <- "~cenv0256/EXCLUDEFROMBACKUP/2002/hadam3p_eu_6amn_2002_1_007475788_0/6amnma.pck3mar.nc"
        variable2 <- "field186"
        file <- file2
        variable <- variable2

        setwd("/ouce-home/staff/cenv0433/data/MaRIUS/WAH-runs/test_data/20150907/region_independent_test_on_Beta/temp")
        file <- "f220ma.pcf3jan.nc"
        variable <- "field1"
        with.border <- TRUE
        
    }

    source(file.path(colFuncs.path, "my.tim.colors.R"))
    ## require(ncdf4)
    ## require(ncdf4.helpers)

    ## load data
    nc <- nc_open(file)
    var <- ncvar_get(nc, variable)
    dims <- nc.get.dim.axes(nc, variable)
    varname <- ncatt_get(nc, variable, "long_name")$value

    ## get time dimensions
    t.orig <- strsplit(ncatt_get(nc, names(dims)[which(dims == "T")], "units")$value, " since ")[[1]]
    T <- ncvar_get(nc, names(dims)[which(dims == "T")])*nc.get.time.multiplier(t.orig[1])
    nccal <- ncatt_get(nc, names(dims)[which(dims == "T")], "calendar")
    if (nccal$hasatt) {
        if (nccal$value == "360_day") {
            time <- as.PCICt(T, origin=strptime(t.orig[2], "%Y-%m-%d"), cal=nccal$value)
            time <- strptime(format(time, "%Y-%m-%d"), format="%Y-%m-%d")
        } else {
            time <- as.POSIXct(T, origin=strptime(t.orig[2], "%Y-%m-%d"))
        }
    } else {
        warning("** undefined calendar - assuming 'standard' *****")
    }
    ## time2 <- nc.get.time.series(nc, time.dim.name=names(dims)[which(dims == "T")])
    ## get spatial coordinates
    X <- ncvar_get(nc, names(dims)[which(dims == "X")])
    Y <- ncvar_get(nc, names(dims)[which(dims == "Y")])
    Xname <- ncatt_get(nc, names(dims)[which(dims == "X")], "standard_name")$value
    Yname <- ncatt_get(nc, names(dims)[which(dims == "Y")], "standard_name")$value
    grid.mapping <- ncatt_get(nc, variable, "grid_mapping")
    if (grid.mapping$hasatt) {
        grid.type <- ncatt_get(nc, grid.mapping$value, "grid_mapping_name")
        if (grid.type$hasatt & grid.type$value == "rotated_latitude_longitude") {
            plon <- ncatt_get(nc, grid.mapping$value, "grid_north_pole_longitude")
            plon <- ifelse(plon$hasatt, plon$value, stop("** ERROR ** missing attribute: 'grid_north_pole_longitude' *****"))
            plat <- ncatt_get(nc, grid.mapping$value, "grid_north_pole_latitude")
            plat <- ifelse(plat$hasatt, plat$value, stop("** ERROR ** missing attribute: 'grid_north_pole_latitude' *****"))
            grid.lonlat <- ncatt_get(nc, variable, "coordinates")
            grid.type <- grid.type$value
            grid.type <- "rotpol"
        } else {
            stop("** ERROR ** unexpected value to 'grid_mapping_name' attribute *****")
        }
        grid.infos <- strsplit(grid.lonlat$value, " ")[[1]]
        lon.name <- grid.infos[which(substr(grid.infos, 1,3) == "lon")]
        lat.name <- grid.infos[which(substr(grid.infos, 1,3) == "lat")]
        lon <- ncvar_get(nc, lon.name)
        lat <- ncvar_get(nc, lat.name)
#        test <- mapproject(X, rep(Y[1], length(X)), orientation=c(plat, plon))
#        lon.name <- 
    } else {
        grid.type <- "lonlat"
        source(file.path(r.infos.path, "degree.adjustRange.R"))
        X.new <- degree.adjustRange(X)
        x.order <- order(X.new)
        var <- var[x.order,,]
        X <- X.new[x.order]
        lon <- X
        lat <- Y
    }

#    if (names(dims)[(dims=="X") | (dims=="Y")] == c("grid_longitude", "grid_latitude"))
#    T <- ncvar_get(nc, names(dims)[dims == "T"])

    ## X <- seq(0,360, length.out=dim(var)[1])
    ## Y <- seq(-80,80, length.out=dim(var)[2])

    if (plottype == "spacetime") {
    
        a2st <- function(arr,
                         lon=attr(arr, "lon"),
                         lat=attr(arr, "lat"),
                         time=attr(arr, "time")) {
            dat2 <- data.frame(val=c(arr))

            ## dimensions given?
            if (length(dim(lon)) > 1) {
                if (!all(dim(lon) == dim(lat))) stop("** ERROR ** dimensions of lon and lat differ *****")
                if (!all(dim(lon) == dim(arr)[1:2])) stop("** ERROR ** dimensions of lon and arr differ *****")
            } else {
                dims.assumed <- c(length(lon), length(lat), length(time))
                if (!all(dim(arr)[1:3] == dims.assumed)) stop("** ERROR ** dimensions assumed do not match *****")
                lon.orig <- lon
                lat.orig <- lat
                lon <- rep(lon.orig, times=length(lat.orig))
                lat <-  rep(lat.orig, each=length(lon.orig))
            }
            
            ## create spatial object
            sp <- SpatialPoints(data.frame(lon=c(lon), lat=c(lat)))
#            sp <- SpatialPixels(sp, tolerance=1)
 #           gridded(sp) <- TRUE
            
            ## spacetime object
            mydata.st <- STFDF(sp, time, dat2)
                                        #        warning("** CHECK WHETHER THE PLACEMENT OF VALUES IS CORRECT **")
            
            return(mydata.st)
        }
    
        if (grid.type == "rotpol") {
            Z.st <- a2st(var, lon, lat, time)
        } else {
            Z.st <- a2st(var-273.15, X, Y, time)
            lon <- X
        }

        if (with.borders) {
            if (all(findInterval(lon, c(-180.00000001,180.00000001)) == 1)) {
                map.borders <- map2SpatialLines(map('world', plot=F))
            } else if (all(findInterval(lon, c(-0.0000001,360.00000001)) == 1)) {
                map.borders <- map2SpatialLines(map('world2', plot=F, xlim=range(lon), ylim=range(lat)))
            } else {
                warning("** unexpected longitude value, not borders can be drawn **")
            }
            proj4string(map.borders) <- "+proj=longlat +datum=WGS84"
            polys <- list("sp.polygons", map.borders, col=1)
            x11()
            stplot(Z.st,col.regions=tim.colors(),
                   sp.layout=polys, main=varname)
 
        } else {
            x11()
            stplot(Z.st,col.regions=tim.colors(), main=varname)
            
        }
    } else if (plottype == "image") {
        
        if (with.borders) {
            ## countries.m = map('world', plot=FALSE, fill=TRUE)
            ## IDs <- sapply(strsplit(countries.m$names, ":"), function(x) x[1])
            ## countries <- map2SpatialPolygons(countries.m, IDs=IDs)
                                        #       which.neg <- which(mapcors[,1]<0)
                                        #        mapcors[which.neg,1] <- mapcors[which.neg,1]+360
                                        #        mapcors[mapcors[,1]<0,1] <- mapcors[mapcors[,1]<0,1]+360
            if (grid.type == "rotpol") {
                data(world.nations)
                mapcors <- matrix(c(world.nations$border$lon,
                                    world.nations$border$lat), ncol=2)
                ## first find the range in lonlat coords
                grid.lonlat <- expand.grid(list(rlon=X,rlat=Y))
                grid.lonlat <- rotpol2lonlat(grid.lonlat$rlon, grid.lonlat$rlat, plon=plon, plat=plat)
                in.range <- apply(grid.lonlat, 2, range, na.rm=TRUE)
                in.range[,1] <- in.range[,1]+c(-1,1)*unique(abs(diff(X)))
                in.range[,2] <- in.range[,2]+c(-1,1)*unique(abs(diff(Y)))
                invals <- apply(mapcors, 1, function(v) (findInterval(v[1], in.range[,1]) == 1) & (findInterval(v[2], in.range[,2]) == 1))
                mapcors[!invals, ] <- NA
                ## Xtemp <- X
                ## Xtemp[Xtemp>180] <- Xtemp[Xtemp>180]-360
                ## xlim <- range(Xtemp)
                ## ylim <- range(Y)
                navals <- apply(is.na(mapcors), 1, any)
                mapcors.rot <- lonlat2rotpol(lon = world.nations$border[!navals,"lon"],
                                             lat = world.nations$border[!navals,"lat"],
                                             plon = plon, plat=plat)
                mapcors[!navals,] <- mapcors.rot
                ## invals <- apply(mapcors, 1, function(v) (findInterval(v[1], xlim) == 1) & (findInterval(v[2], ylim) == 1))
                ## mapcors[!invals, ] <- NA
                mapcors.neg <- which(mapcors[,1]<0)
                mapcors[mapcors.neg, 1] <- mapcors[mapcors.neg, 1]+360
            } else if (grid.type != "lonlat") {
                if (all(findInterval(lon, c(-180.00000001,180.00000001)) == 1)) {
                    map.borders <- map('world', plot=F)
                } else if (all(findInterval(lon, c(-0.0000001,360.00000001)) == 1)) {
                    map.borders <- map('world2', plot=F)
                } else {
                    warning("** unexpected longitude value, not borders can be drawn **")
                }
                mapcors <- map.borders
                ## mapcors <- mapproject(list(x=world.nations$border[,"lon"],
                ##                            y=world.nations$border[,"lat"]))
            } else {
                stop("** ERROR ** unexpected value for grid.type *****")
            }


    
            ## make plot
            source(file.path(mapFuncs.path, "my.map.plot.R"))
            source(file.path(plotFuncs.path, "plt_mk/define.plt.R"))
            Xorder <- order(X)
            Yorder <- order(Y)
            Z <- var[Xorder, Yorder,]
            
            switch(as.character(length(time)),
                   "31"= {
                       mfrows <- c(6,6)
                       height <- 9
                       width <- 12
                       mar <- c(0.1,0.1,0.1,3)
                      },
                   "1"={
                       mfrows <- c(1,1)
                       height <- width <- 7
                       mar <- c(0.1,0.1,0.1,3)
                      },
                   "12"={
                       mfrows <- c(3,4)
                       height <- width <- 7
                       mar <- c(0.1,0.1,0.1,3)
                      },
                   "3"={
                       mfrows <- c(1,3)
                       height <- width <- 7
                       mar <- c(0.1,0.1,0.1,3)
                      },
                   {
                       mfrows <- rep(ceiling(sqrt(length(time))), 2)
                       height <- width <- 7
                       mar <- c(0.1,0.1,0.1,3)
                      })
            breaks <- pretty(var, n=10)
            x11(width=width, height=height)
            par(mar=c(0.1,0.1,0.1,2))
            plt.list <- define.plt(mfrows[1], mfrows[2])        
            for (i in 1:length(time)) {
                smallplot <- if (i==length(time)) c(0.85,0.88,0.1,0.8) else rep(NA,4)
                my.map.plot(X[Xorder],Y[Yorder],z=var[Xorder,Yorder,i], breaks = breaks, col=my.tim.colors, smallplot=smallplot, main=time[i], bigplot=plt.list[[i]])
                lines(mapcors)
            }
        } else {
            image.plot()
        }

    }
}


## now call the function
do.call(ncplot, args=func.args)

message("Press Return To Close plot")
invisible(readLines("stdin", n=1))
